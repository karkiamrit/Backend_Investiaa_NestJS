# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Address {
  country: String
  location: String
  state: String
}

type AddressInput {
  country: String
  location: String
  state: String
}

input CreateUserInput {
  address: [Address!]
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean = false
  facebook: String
  instagram: String
  kyc_verified: Boolean = false
  name: String
  nickname: String!
  password: String!
  phone: String!
  phone_verified: Boolean = false
  preferred_sector: [String!]
  role: String!
  twitter: String
  whatsapp: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Education {
  level: String
  major: String
}

type EducationInput {
  level: String
  major: String
}

input GetManyInput {
  """count or data or all, default = data"""
  dataType: String

  """
  {key: "ASC" or "DESC" or "asc" or "desc" or 1 or -1} or {key: {direction: "ASC" or "DESC" or "asc" or "desc", nulls: "first" or "last" or "FIRST" or "LAST"}}}
  """
  order: JSON
  pagination: IPagination
  where: JSON
}

input GetOneInput {
  where: JSON!
}

type GetUserType {
  count: Float
  data: [User!]
}

input IPagination {
  """Started from 0"""
  page: Int!

  """Size of page"""
  size: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtWithUser {
  jwt: String!
  user: User!
}

type Mutation {
  createManyUsers(input: [CreateUserInput!]!): [User!]!
  createUser(input: CreateUserInput!): User!
  deleteUser(id: String!): JSON!
  signIn(input: SignInInput!): JwtWithUser!

  """
  Before you start to sign up, you have to set private key and public key in .env
  """
  signUp(input: SignUpInput!): JwtWithUser!
  updateUser(id: String!, input: UpdateUserInput!): User!
}

type Query {
  getManyUsers(input: GetManyInput): GetUserType!
  getMe: User!
  getOneUser(input: GetOneInput!): User!
}

input SignInInput {
  password: String!
  phone: String!
}

input SignUpInput {
  nickname: String!
  password: String!
  phone: String!
}

input UpdateUserInput {
  address: Address
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean
  facebook: String
  instagram: String
  kyc_verified: Boolean
  name: String
  nickname: String
  password: String
  phone: String
  phone_verified: Boolean
  preferred_sector: [String!]
  role: String
  twitter: String
  whatsapp: String
}

type User {
  address: AddressInput
  avatar: String
  bio: String
  createdAt: DateTime!
  education: EducationInput
  email: String
  email_verified: Boolean!
  facebook: String!
  id: ID!
  instagram: String!
  kyc_verified: Boolean!
  name: String
  nickname: String!
  phone: String!
  phone_verified: Boolean!
  preferred_sector: [String!]
  role: String!
  twitter: String!
  updatedAt: DateTime!
  whatsapp: String!
}