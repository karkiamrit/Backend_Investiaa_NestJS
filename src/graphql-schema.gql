# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Address {
  country: String
  location: String
  state: String
}

type AddressInput {
  country: String
  location: String
  state: String
}

input CreateEntrepreneurInput {
  has_prior_startups: Boolean!
  profession: ProfessionInput
}

input CreateInvestorInput {
  profession_experience: Float
}

input CreateProjectInput {
  adhoc_file: String!
  description: String!
  domain: String!
  financial_projection_docs: String!
  fund_preference: String!
  logo: String!
  name: String!
  pitch_deck: String!
  prior_investors: String!
  registeration_docs: String!
  social_media_links: [String!]!
  status: String!
  tagline: String!
  tax_clearence_docs: String!
  team_members: String!
  usp: String!
}

input CreateUserInput {
  address: [Address!]
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean = false
  facebook: String
  instagram: String
  kyc_verified: Boolean = false
  name: String
  password: String!
  phone: String!
  phone_verified: Boolean = false
  preferred_sector: [String!]
  reset_token: Float
  role: String!
  twitter: String
  username: String!
  whatsapp: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Education {
  level: String
  major: String
}

type EducationInput {
  level: String
  major: String
}

type Entrepreneur {
  has_prior_startups: Boolean!
  id: ID!
  profession: Profession
  user: User
}

type GetEntrepreneurType {
  count: Float
  data: [Entrepreneur!]
}

type GetInvestorType {
  count: Float
  data: [Investor!]
}

input GetManyInput {
  """count or data or all, default = data"""
  dataType: String

  """
  {key: "ASC" or "DESC" or "asc" or "desc" or 1 or -1} or {key: {direction: "ASC" or "DESC" or "asc" or "desc", nulls: "first" or "last" or "FIRST" or "LAST"}}}
  """
  order: JSON
  pagination: IPagination
  where: JSON
}

input GetOneInput {
  where: JSON!
}

type GetProjectType {
  count: Float
  data: [Project!]
}

type GetUserType {
  count: Float
  data: [User!]
}

input IPagination {
  """Started from 0"""
  page: Int!

  """Size of page"""
  size: Int!
}

type Investor {
  createdAt: DateTime!
  id: ID!
  profession_experience: Float
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtWithUser {
  jwt: String!
  user: User!
}

type Mail {
  createdAt: DateTime!
  html_content: String!
  id: ID!
  name: String!
  subject: String!
  text_content: String!
  updatedAt: DateTime!
}

type Mutation {
  SignUp(input: SignUpInput!): User!
  createEntrepreneur(input: CreateEntrepreneurInput!): Entrepreneur!
  createInvestor(input: CreateInvestorInput!): Investor!
  createManyInvestor(input: [CreateInvestorInput!]!): [Investor!]!
  createManyUsers(input: [CreateUserInput!]!): [User!]!
  createProject(input: CreateProjectInput!): Project!
  createUser(input: CreateUserInput!): User!
  deleteEntrepreneur(id: Float!): JSON!
  deleteEntrepreneurProfile: JSON!
  deleteInvestor(id: Float!): Investor!
  deleteProject(id: Float!): JSON!
  deleteProjectProfile: JSON!
  deleteUser(id: Float!): JSON!
  forgotPassword(email: String!): Boolean!
  logout(accessToken: String!): Boolean!
  requestOtpVerify(otpType: String!, phone: String!): Boolean!
  resetPassword(newPassword: String!, token: String!): Boolean!
  signIn(input: SignInInput!): JwtWithUser!
  updateEntrepreneur(id: Float!, input: UpdateEntrepreneurInput!): Entrepreneur!
  updateEntrepreneurProfile(input: UpdateEntrepreneurInput!): Entrepreneur!
  updateInvestor(id: Float!, input: UpdateInvestorInput!): Investor!
  updateMe(input: UpdateUserInput!): User!
  updateProject(id: Float!, input: UpdateProjectInput!): Project!
  updateProjectProfile(input: UpdateProjectInput!): Project!
  updateUser(id: Float!, input: UpdateUserInput!): User!
  verifyPhone(otpCode: String!, phone: String!): Boolean!
}

type Profession {
  designation: String
  years_of_experience: Float
}

input ProfessionInput {
  designation: String
  years_of_experience: Float
}

type Project {
  adhoc_file: String!
  createdAt: DateTime!
  description: String!
  domain: String!
  entrepreneur: Entrepreneur!
  financial_projection_docs: String!
  fund_preference: String!
  id: ID!
  logo: String!
  name: String!
  pitch_deck: String!
  prior_investors: String!
  registeration_docs: String!
  social_media_links: [String!]!
  status: String!
  tagline: String!
  tax_clearence_docs: String!
  team_members: String!
  updatedAt: DateTime!
  usp: String!
}

type Query {
  getManyEntrepreneurs(input: GetManyInput): GetEntrepreneurType!
  getManyInvestors(input: GetManyInput): GetInvestorType!
  getManyProjects(input: GetManyInput): GetProjectType!
  getManyUsers(input: GetManyInput): GetUserType!
  getMe: User!
  getMyEntrepreneurProfile: Entrepreneur!
  getOneEntrepreneur(input: GetOneInput!): Entrepreneur!
  getOneInvestor(input: GetOneInput!): Investor!
  getOneProject(input: GetOneInput!): Project!
  getOneUser(input: GetOneInput!): User!
  getProjectProfile: Project!
}

input SignInInput {
  password: String!
  phone: String!
}

input SignUpInput {
  email: String!
  password: String!
  phone: String!
  username: String!
}

input UpdateEntrepreneurInput {
  has_prior_startups: Boolean
  profession: ProfessionInput
}

input UpdateInvestorInput {
  profession_experience: Float
}

input UpdateProjectInput {
  adhoc_file: String
  description: String
  domain: String
  financial_projection_docs: String
  fund_preference: String
  logo: String
  name: String
  pitch_deck: String
  prior_investors: String
  registeration_docs: String
  social_media_links: [String!]
  status: String
  tagline: String
  tax_clearence_docs: String
  team_members: String
  usp: String
}

input UpdateUserInput {
  address: Address
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean
  facebook: String
  instagram: String
  kyc_verified: Boolean
  name: String
  password: String
  phone: String
  phone_verified: Boolean
  preferred_sector: [String!]
  reset_token: Float
  role: String
  twitter: String
  username: String
  whatsapp: String
}

type User {
  address: AddressInput
  avatar: String
  bio: String
  createdAt: DateTime!
  education: EducationInput
  email: String
  email_verified: Boolean!
  facebook: String!
  id: ID!
  instagram: String!
  kyc_verified: Boolean!
  name: String
  phone: String!
  phone_verified: Boolean!
  preferred_sector: [String!]
  reset_token: Float
  role: String!
  twitter: String!
  updatedAt: DateTime!
  username: String!
  whatsapp: String!
}