# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Address {
  country: String
  location: String
  state: String
}

type AddressInput {
  country: String
  location: String
  state: String
}

type Bid {
  accepted: Boolean!
  createdAt: DateTime!
  equity: Float
  equity_amount: Float
  id: ID!
  incubator: Incubator
  investor: Investor
  loan_amount: Float
  loan_percent: Float
  loan_years: Float
  project: Project
  service_offered: [String!]
  type: String!
  updatedAt: DateTime!
}

input CreateBidInput {
  equity: Float!
  equity_amount: Float!
  loan_amount: Float
  loan_percent: Float
  loan_years: Float
  service_offered: [String!]!
  type: String!
}

input CreateEntrepreneurInput {
  has_prior_startups: Boolean!
  is_student: Boolean!
  profession: ProfessionInput
}

input CreateIncubatorInput {
  preferred_roi_type: [String!]!
  services_offered: [String!]!
}

input CreateInvestorInput {
  investment_preferences: [String!]!
  investment_range: InvestmentRangeInput!
  preferred_investment_stage: [String!]!
  prior_investments: [PriorInvestmentInput!]!
  profession: ProfessionInput
  profession_experience: Float
}

input CreateProjectInputIncubator {
  adhoc_file: String
  bid_closing: DateTime!
  bid_opening: DateTime!
  description: String!
  domain: String!
  financial_projection_docs: String
  fund_preference: String!
  logo: String!
  name: String!
  pitch_deck: String!
  prior_investors: [PriorInvestorInput!]
  registeration_docs: String
  social_media_links: [String!]!
  status: String!
  tagline: String!
  tax_clearence_docs: String
  team_members: [TeamMemberInput!]
  usp: String!
}

input CreateUserInput {
  address: [Address!]
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean = false
  facebook: String
  instagram: String
  kyc_verified: Boolean = false
  name: String
  password: String!
  phone: String!
  phone_verified: Boolean = false
  preferred_sector: [String!]
  reset_token: Float
  twitter: String
  username: String!
  whatsapp: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Education {
  level: String
  major: String
}

type EducationInput {
  level: String
  major: String
}

type Entrepreneur {
  has_prior_startups: Boolean!
  id: ID!
  is_student: Boolean!
  profession: Profession
  user: User
}

type GetBidType {
  count: Float
  data: [Bid!]
}

type GetEntrepreneurType {
  count: Float
  data: [Entrepreneur!]
}

type GetIncubatorType {
  count: Float
  data: [Incubator!]
}

type GetInvestorType {
  count: Float
  data: [Investor!]
}

input GetManyInput {
  """count or data or all, default = data"""
  dataType: String

  """
  {key: "ASC" or "DESC" or "asc" or "desc" or 1 or -1} or {key: {direction: "ASC" or "DESC" or "asc" or "desc", nulls: "first" or "last" or "FIRST" or "LAST"}}}
  """
  order: JSON
  pagination: IPagination
  where: JSON
}

input GetOneInput {
  where: JSON!
}

type GetProjectType {
  count: Float
  data: [Project!]
}

type GetUserType {
  count: Float
  data: [User!]
}

input IPagination {
  """Started from 0"""
  page: Int!

  """Size of page"""
  size: Int!
}

type Incubator {
  createdAt: DateTime!
  id: ID!
  preferred_roi_type: [String!]!
  services_offered: [String!]!
  updatedAt: DateTime!
  user: User
}

type Investment {
  createdAt: DateTime!
  id: ID!
  type: String!
  updatedAt: DateTime!
}

type InvestmentRange {
  from: Float
  to: Float
}

input InvestmentRangeInput {
  from: Float
  to: Float
}

type Investor {
  createdAt: DateTime!
  id: ID!
  investment_preferences: [String!]!
  investment_range: InvestmentRange
  preferred_investment_stage: [String!]!
  prior_investments: [PriorInvestment!]!
  profession: Profession!
  profession_experience: Float
  updatedAt: DateTime!
  user: User
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type JwtWithUser {
  jwt: String!
  user: User!
}

type Mail {
  createdAt: DateTime!
  html_content: String!
  id: ID!
  name: String!
  subject: String!
  text_content: String!
  updatedAt: DateTime!
}

type Mutation {
  SignUp(input: SignUpInput!): User!
  acceptBidInvestor(bidID: Float!): JSON!
  createBid(input: CreateBidInput!, projectID: Float!): Bid!
  createEntrepreneur(input: CreateEntrepreneurInput!): Entrepreneur!
  createIncubator(input: CreateIncubatorInput!): Incubator!
  createInvestor(input: CreateInvestorInput!): Investor!
  createManyBid(input: [CreateBidInput!]!): [Bid!]!
  createManyUsers(input: [CreateUserInput!]!): [User!]!

  """Apply for incubation by creating project"""
  createProjectforIncubator(input: CreateProjectInputIncubator!): Project!

  """Apply for investment by creating this project"""
  createProjectforInvestor(input: JSONObject!): Project!
  createUser(input: CreateUserInput!): User!
  deleteBid(id: Float!): Bid!
  deleteBidProfile(id: Float!): Bid!
  deleteEntrepreneur(id: Float!): JSON!
  deleteEntrepreneurProfile: JSON!
  deleteIncubator(id: Float!): Incubator!
  deleteIncubatorProfile: JSON!
  deleteInvestor(id: Float!): Investor!
  deleteInvestorProfile: JSON!
  deleteProject(id: Float!): JSON!
  deleteProjectProfile(id: Float!): Project!
  deleteUser(id: Float!): JSON!
  forgotPassword(email: String!): Boolean!
  logout(accessToken: String!): Boolean!
  requestOtpVerify(otpType: String!, phone: String!): Boolean!
  resetPassword(newPassword: String!, token: String!): Boolean!
  signIn(input: SignInInput!): JwtWithUser!
  updateBid(id: Float!, input: UpdateBidInput!): Bid!
  updateBidProfile(id: Float!, input: UpdateBidInput!): Bid!
  updateEntrepreneur(id: Float!, input: UpdateEntrepreneurInput!): Entrepreneur!
  updateEntrepreneurProfile(input: UpdateEntrepreneurInput!): Entrepreneur!
  updateIncubator(id: Float!, input: UpdateIncubatorInput!): Incubator!
  updateIncubatorProfile(input: UpdateIncubatorInput!): Incubator!
  updateInvestor(id: Float!, input: UpdateInvestorInput!): Investor!
  updateInvestorProfile(input: UpdateInvestorInput!): Investor!
  updateMe(input: UpdateUserInput!): User!
  updateProject(id: Float!, input: UpdateProjectInput!): Project!
  updateProjectProfile(id: Float!, input: UpdateProjectInput!): Project!
  updateUser(id: Float!, input: UpdateUserInputAdmin!): User!
  verifyPhone(otpCode: String!, phone: String!): Boolean!
}

type PriorInvestment {
  company_name: String
  date: DateTime
  id: Float
}

input PriorInvestmentInput {
  company_name: String
  date: DateTime
  id: Float
}

type PriorInvestor {
  amount: Float
  date: DateTime
  equity: Float
  id: Float
  name: String
}

input PriorInvestorInput {
  amount: Float
  date: DateTime
  equity: Float
  id: Float
  name: String
}

type Profession {
  designation: String
  years_of_experience: Float
}

input ProfessionInput {
  designation: String
  years_of_experience: Float
}

type Project {
  adhoc_file: String
  bid_closing: DateTime!
  bid_opening: DateTime!
  createdAt: DateTime!
  description: String!
  domain: String!
  entrepreneur: Entrepreneur!
  financial_projection_docs: String
  fund_preference: String!
  id: ID!
  logo: String!
  name: String!
  pitch_deck: String!
  prior_investors: [PriorInvestor!]!
  registeration_docs: String
  social_media_links: [String!]!
  status: String!
  tagline: String!
  tax_clearence_docs: String
  team_members: [TeamMember!]!
  updatedAt: DateTime!
  usp: String!
}

type Query {
  """Returns multiple bids based on the provided input"""
  getManyBids(input: GetManyInput): GetBidType!
  getManyEntrepreneurs(input: GetManyInput): GetEntrepreneurType!
  getManyIncubators(input: GetManyInput): GetIncubatorType!
  getManyInvestors(input: GetManyInput): GetInvestorType!
  getManyProjects(input: GetManyInput): GetProjectType!
  getManyUsers(input: GetManyInput): GetUserType!
  getMe: User!

  """
  get bids associated with the current investor; only applicable for investor
  """
  getMyBidProfileByIncubatorID(input: GetManyInput): GetBidType!

  """
  get bids associated with the current investor; only applicable for investor
  """
  getMyBidProfileByInvestorID(input: GetManyInput): GetBidType!
  getMyEntrepreneurProfile: Entrepreneur!
  getMyIncubatorProfile: Incubator!
  getMyInvestorProfile: Investor!
  getMyProjectProfile(input: GetManyInput): GetProjectType!

  """Returns a single bid based on the bid id; only applicable for admin"""
  getOneBid(input: GetOneInput!): Bid!
  getOneEntrepreneur(input: GetOneInput!): Entrepreneur!
  getOneIncubator(input: GetOneInput!): Incubator!
  getOneInvestor(input: GetOneInput!): Investor!
  getOneProject(input: GetOneInput!): Project!
  getOneUser(input: GetOneInput!): User!
  getProjectProfiles: [Project!]!
}

input SignInInput {
  password: String!
  phone: String!
}

input SignUpInput {
  email: String!
  password: String!
  phone: String!
  username: String!
}

type StartupInvestment {
  bid: Bid
  entrepreneur: Entrepreneur!
  id: ID!
}

type TeamMember {
  bio: String
  contact_number: Float
  designation: String
  education_level: String
  email: String
  expertise: String
  id: Float
  name: String
  photo: String
}

input TeamMemberInput {
  bio: String
  contact_number: Float
  designation: String
  education_level: String
  email: String
  expertise: String
  id: Float
  name: String
  photo: String
}

input UpdateBidInput {
  equity: Float
  equity_amount: Float
  loan_amount: Float
  loan_percent: Float
  loan_years: Float
  service_offered: [String!]
}

input UpdateEntrepreneurInput {
  has_prior_startups: Boolean
  is_student: Boolean!
  profession: ProfessionInput
}

input UpdateIncubatorInput {
  preferred_roi_type: [String!]!
  services_offered: [String!]!
}

input UpdateInvestorInput {
  investment_preferences: [String!]
  investment_range: InvestmentRangeInput
  preferred_investment_stage: [String!]
  prior_investments: [PriorInvestmentInput!]
  profession: ProfessionInput
  profession_experience: Float
}

input UpdateProjectInput {
  adhoc_file: String
  bid_closing: DateTime
  bid_opening: DateTime
  description: String
  domain: String
  financial_projection_docs: String
  fund_preference: String
  logo: String
  name: String
  pitch_deck: String
  prior_investors: [PriorInvestorInput!]
  registeration_docs: String
  social_media_links: [String!]
  status: String
  tagline: String
  tax_clearence_docs: String
  team_members: [TeamMemberInput!]
  usp: String
}

input UpdateUserInput {
  address: Address
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean
  facebook: String
  instagram: String
  kyc_verified: Boolean
  name: String
  password: String
  phone: String
  phone_verified: Boolean
  preferred_sector: [String!]
  reset_token: Float
  twitter: String
  username: String
  whatsapp: String
}

input UpdateUserInputAdmin {
  address: Address
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean
  facebook: String
  instagram: String
  kyc_verified: Boolean
  name: String
  password: String
  phone: String
  phone_verified: Boolean
  preferred_sector: [String!]
  reset_token: Float
  role: String
  twitter: String
  username: String
  whatsapp: String
}

type User {
  address: AddressInput
  avatar: String
  bio: String
  createdAt: DateTime!
  education: EducationInput
  email: String
  email_verified: Boolean!
  facebook: String!
  id: ID!
  instagram: String!
  kyc_verified: Boolean!
  name: String
  phone: String!
  phone_verified: Boolean!
  preferred_sector: [String!]
  reset_token: Float
  role: String!
  twitter: String!
  updatedAt: DateTime!
  username: String!
  whatsapp: String!
}