# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Address {
  country: String
  location: String
  state: String
}

type AddressInput {
  country: String
  location: String
  state: String
}

input CreateEntrepreneurInput {
  has_prior_startups: Boolean! = false
  profession: ProfessionInput
  profession_experience: Float
}

input CreateMailInput {
  html_content: String
  name: String!
  subject: String!
  text_content: String!
}

input CreateProject_detailsInput {
  name: String!
}

input CreateUserInput {
  address: [Address!]
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean = false
  facebook: String
  instagram: String
  kyc_verified: Boolean = false
  name: String
  password: String!
  phone: String!
  phone_verified: Boolean = false
  preferred_sector: [String!]
  reset_token: Float
  role: String!
  twitter: String
  type: [String!]
  username: String!
  whatsapp: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Education {
  level: String
  major: String
}

type EducationInput {
  level: String
  major: String
}

type Entrepreneur {
  has_prior_startups: Boolean!
  id: ID!
  profession: Profession
  profession_experience: Float
  user: User!
}

type GetEntrepreneurType {
  count: Float
  data: [Entrepreneur!]
}

input GetManyInput {
  """count or data or all, default = data"""
  dataType: String

  """
  {key: "ASC" or "DESC" or "asc" or "desc" or 1 or -1} or {key: {direction: "ASC" or "DESC" or "asc" or "desc", nulls: "first" or "last" or "FIRST" or "LAST"}}}
  """
  order: JSON
  pagination: IPagination
  where: JSON
}

input GetOneInput {
  where: JSON!
}

type GetProject_detailsType {
  count: Float
  data: [Project_details!]
}

type GetUserType {
  count: Float
  data: [User!]
}

input IPagination {
  """Started from 0"""
  page: Int!

  """Size of page"""
  size: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtWithUser {
  access_token: String!
  refresh_token: String!
  user: User!
}

type Mail {
  createdAt: DateTime!
  html_content: String!
  id: ID!
  name: String!
  subject: String!
  text_content: String!
  updatedAt: DateTime!
}

type Mutation {
  SignUp(input: SignUpInput!): User!
  createEntrepreneur(input: CreateEntrepreneurInput!): Entrepreneur!
  createMail(input: CreateMailInput!): Mail!
  createManyProject_details(input: [CreateProject_detailsInput!]!): [Project_details!]!
  createManyUsers(input: [CreateUserInput!]!): [User!]!
  createProject_details(input: CreateProject_detailsInput!): Project_details!
  createUser(input: CreateUserInput!): User!
  deleteEntrepreneur(id: Float!): Entrepreneur!
  deleteMail(id: Float!): Mail!
  deleteProject_details(id: Float!): Project_details!
  deleteUser(id: Float!): JSON!
  forgotPassword(email: String!): Boolean!
  logout(fromAll: Boolean!, refreshToken: String!): Boolean!
  refresh(refreshToken: String!): String!
  requestOtpVerify(otpType: String!, phone: String!): Boolean!
  resetPassword(newPassword: String!, token: String!): Boolean!
  signIn(input: SignInInput!): JwtWithUser!
  updateEntrepreneur(id: Float!, input: UpdateEntrepreneurInput!): Entrepreneur!
  updateMail(id: Float!, input: UpdateMailInput!): Mail!
  updateMe(input: UpdateUserInput!): User!
  updateProject_details(id: Float!, input: UpdateProject_detailsInput!): Project_details!
  updateUser(id: Float!, input: UpdateUserInput!): User!
  verifyPhone(otpCode: String!, phone: String!): Boolean!
}

type Profession {
  designation: String!
  years_of_experience: Float!
}

input ProfessionInput {
  designation: String!
  years_of_experience: Float!
}

type Project_details {
  adhoc_file: String!
  description: String!
  domain: String!
  financial_projection_docs: String!
  fund_preference: String!
  id: ID!
  logo: String!
  name: String!
  pitch_deck: String!
  prior_investors: String!
  registeration_docs: String!
  social_media_links: [String!]!
  status: String!
  tagline: String!
  tax_clearence_docs: String!
  team_members: String!
  usp: String!
}

type Query {
  getManyEntrepreneurs(input: GetManyInput): GetEntrepreneurType!
  getManyProject_detailss(input: GetManyInput): GetProject_detailsType!
  getManyUsers(input: GetManyInput): GetUserType!
  getMe: User!
  getOneEntrepreneur(input: GetOneInput!): Entrepreneur!
  getOneProject_details(input: GetOneInput!): Project_details!
  getOneUser(input: GetOneInput!): User!
}

input SignInInput {
  password: String!
  phone: String!
}

input SignUpInput {
  password: String!
  phone: String!
  username: String!
}

input UpdateEntrepreneurInput {
  has_prior_startups: Boolean! = false
  profession: ProfessionInput
  profession_experience: Float
}

input UpdateMailInput {
  html_content: String
  name: String!
  subject: String
  text_content: String
}

input UpdateProject_detailsInput {
  name: String!
}

input UpdateUserInput {
  address: Address
  avatar: String
  bio: String
  education: Education
  email: String
  email_verified: Boolean
  facebook: String
  instagram: String
  kyc_verified: Boolean
  name: String
  password: String
  phone: String
  phone_verified: Boolean
  preferred_sector: [String!]
  reset_token: Float
  role: String
  twitter: String
  type: [String!]
  username: String
  whatsapp: String
}

type User {
  address: AddressInput
  avatar: String
  bio: String
  createdAt: DateTime!
  education: EducationInput
  email: String
  email_verified: Boolean!
  facebook: String!
  id: ID!
  instagram: String!
  kyc_verified: Boolean!
  name: String
  phone: String!
  phone_verified: Boolean!
  preferred_sector: [String!]
  reset_token: Float
  role: String!
  twitter: String!
  type: [String!]!
  updatedAt: DateTime!
  username: String!
  whatsapp: String!
}